type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase
    from enum import Enum
    from typing import List, Optional
    from copy import deepcopy

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class FieldState(Enum):
        X = 'X'
        O = 'O'
        FREE = ' '


    def get_state(symbol):
        if symbol == 'X':
            return FieldState.X
        elif symbol == 'O':
            return FieldState.O
        elif symbol == ' ' or symbol == '_':
            return FieldState.FREE
        else:
            return None


    class TicTacToeField:

        def __init__(self, *, field: str = '', constructed=None):

            if constructed is not None:
                self.field = deepcopy(constructed)

            else:
                self.field: List[List[Optional[FieldState]]] = [
                    [None for _ in range(3)] for _ in range(3)
                ]

                for row in range(3):
                    for col in range(3):
                        index = (2 - row) * 3 + col
                        self.field[row][col] = get_state(field[index])

        def equal_to(self, other) -> bool:
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        return False
            return True

        def get(self, x: int, y: int) -> FieldState:
            return self.field[y - 1][x - 1]

        def has_next_as(self, other) -> bool:
            improved: bool = False
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        if self.field[i][j] == FieldState.FREE and not improved:
                            improved = True
                        else:
                            return False
            return improved

        def differ_by_one(self, other) -> bool:
            have_single_difference = False
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        if have_single_difference:
                            return False
                        have_single_difference = True
            return have_single_difference

        def is_close_to(self, other) -> bool:
            return (
                self.equal_to(other)
                or self.has_next_as(other)
                or other.has_next_as(self)
            )

        def is_winning(self, side: FieldState):
            if side == FieldState.FREE:
                return False

            for i in 1, 2, 3:
                if (self.get(i, 1) == side and
                    self.get(i, 2) == side and
                    self.get(i, 3) == side):
                    return True
                if (self.get(1, i) == side and
                    self.get(2, i) == side and
                    self.get(3, i) == side):
                    return True

            if (self.get(1, 1) == side and
                self.get(2, 2) == side and
                self.get(3, 3) == side):
                return True

            if (self.get(1, 3) == side and
                self.get(2, 2) == side and
                self.get(3, 1) == side):
                return True

        def is_draw(self):
            if self.is_winning(FieldState.X) or self.is_winning(FieldState.O):
                return False
            for i in 1, 2, 3:
                for j in 1, 2, 3:
                    if self.get(i, j) == FieldState.FREE:
                        return False
            return True

        @staticmethod
        def parse(field_str: str):

            lines = field_str.splitlines()
            lines = [i.strip() for i in lines]
            lines = [i for i in lines if
                     i.startswith('|') and i.endswith('|')]

            for line in lines:
                if len(line) != 9:
                    raise WrongAnswerException(
                        f"Line of Tic-Tac-Toe field should be 9 characters long\n"
                        f"found {len(line)} characters in \"{line}\"")
                for c in line:
                    if c not in 'XO|_ ':
                        return None

            field: List[List[Optional[FieldState]]] = [
                [None for _ in range(3)] for _ in range(3)
            ]

            y: int = 2

            for line in lines:
                cols = line[2], line[4], line[6]
                x: int = 0
                for c in cols:
                    state = get_state(c)
                    if state is None:
                        return None
                    field[y][x] = state
                    x += 1
                y -= 1

            return TicTacToeField(constructed=field)

        @staticmethod
        def parse_all(output: str):
            fields = []

            lines = output.splitlines()
            lines = [i.strip() for i in lines]
            lines = [i for i in lines if len(i) > 0]

            candidate_field = ''
            inside_field = False
            for line in lines:
                if '----' in line and not inside_field:
                    inside_field = True
                    candidate_field = ''
                elif '----' in line and inside_field:
                    field = TicTacToeField.parse(candidate_field)
                    if field is not None:
                        fields += [field]
                    inside_field = False

                if inside_field and line.startswith('|'):
                    candidate_field += line + '\n'

            return fields


    inputs = [
        "1 1", "1 2", "1 3",
        "2 1", "2 2", "2 3",
        "3 1", "3 2", "3 3"
    ]


    def iterate_cells(initial: str) -> str:
        index: int = -1
        for i in range(len(inputs)):
            if initial == inputs[i]:
                index = i
                break

        if index == -1:
            return ''

        full_input: str = ''
        for i in range(index, index + 9):
            full_input += inputs[i % len(inputs)] + '\n'

        return full_input


    class TicTacToeTest(StageTest):
        def generate(self) -> List[TestCase]:
            tests: List[TestCase] = []

            i: int = 0
            for input in inputs:
                full_move_input = iterate_cells(input)

                str_nums = input.split()
                x = int(str_nums[0])
                y = int(str_nums[1])

                if i % 2 == 1:
                    full_move_input = f'4 {i}\n' + full_move_input

                full_game_input = ''
                for _ in range(9):
                    full_game_input += full_move_input

                tests += [
                    TestCase(
                        stdin=full_game_input,
                        attach=(x, y)
                    )
                ]

                i += 1

            return tests

        def check(self, reply: str, attach: str) -> CheckResult:

            clue_x, clue_y = attach

            fields = TicTacToeField.parse_all(reply)

            if len(fields) == 0:
                return CheckResult.wrong(
                    "No fields found"
                )

            for i in range(1, len(fields)):
                curr: TicTacToeField = fields[i - 1]
                next: TicTacToeField = fields[i]

                stayed = curr.equal_to(next)
                improved = curr.has_next_as(next)

                if not (stayed or improved):
                    return CheckResult.wrong(
                        "For two fields following each " +
                        "other one is not a continuation " +
                        "of the other (they differ more than in two places)."
                    )

            lines = reply.splitlines()
            last_line = lines[-1]

            if not ('X wins' in last_line or 'O wins' in last_line or 'Draw' in last_line):
                return CheckResult.wrong(
                    "Can't parse final result, " +
                    "should contain \"Draw\", \"X wins\" or \"O wins\".\n" +
                    "Your last line: \"" + last_line + "\""
                )

            if 'X wins' in last_line and 'O wins' in last_line:
                return CheckResult.wrong(
                    "Your final result contains \"X wins\" and \"O wins\" " +
                    "at the same time. This is impossible.\n" +
                    "Your last line: \"" + last_line + "\""
                )

            if 'X wins' in last_line and 'Draw' in last_line:
                return CheckResult.wrong(
                    "Your final result contains \"X wins\" and \"Draw\" " +
                    "at the same time. This is impossible.\n" +
                    "Your last line: \"" + last_line + "\""
                )

            if 'O wins' in last_line and 'Draw' in last_line:
                return CheckResult.wrong(
                    "Your final result contains \"O wins\" and \"Draw\" " +
                    "at the same time. This is impossible.\n" +
                    "Your last line: \"" + last_line + "\""
                )

            last_field: TicTacToeField = fields[-1]

            if last_field.is_winning(FieldState.X) and 'X wins' not in last_line:
                return CheckResult.wrong(
                    "Your last field shows that X wins, " +
                    "and your last line should contain \"X wins\".\n" +
                    "Your last line: \"" + last_line + "\""
                )

            if last_field.is_winning(FieldState.O) and 'O wins' not in last_line:
                return CheckResult.wrong(
                    "Your last field shows that O wins, " +
                    "and your last line should contain \"O wins\".\n" +
                    "Your last line: \"" + last_line + "\""
                )

            if last_field.is_draw() and 'Draw' not in last_line:
                return CheckResult.wrong(
                    "Your last field shows that there is a draw, " +
                    "and your last line should contain \"Draw\".\n" +
                    "Your last line: \"" + last_line + "\""
                )

            if (last_field.is_winning(FieldState.X) or
                last_field.is_winning(FieldState.O) or last_field.is_draw()):
                return CheckResult.correct()

            return CheckResult.wrong(
                "Your last field contains unfinished game, "
                "the game should be finished!"
            )


    if __name__ == '__main__':
        TicTacToeTest('tictactoe.tictactoe').run_tests()
  learner_created: false
- name: tictactoe/tictactoe.py
  visible: true
  text: "# write your code here\ndef print_board():\n    # Display is setup:\n   \
    \ '''\n    (x: row, y: column)\n    (0, 0) (0, 1) (0, 2)\n    (1, 0) (1, 1) (1,\
    \ 2)\n    (2, 0) (2, 1) (2, 2)\n    '''\n    print(f'''---------\n| {cells[0][0]}\
    \ {cells[0][1]} {cells[0][2]} |\n| {cells[1][0]} {cells[1][1]} {cells[1][2]} |\n\
    | {cells[2][0]} {cells[2][1]} {cells[2][2]} |\n---------''')\n\n    # Invert cell\
    \ Map to match this:\n    ''' Check based on GRID pattern: \n        (x: column,\
    \ y: row)\n        (1, 3) (2, 3) (3, 3)\n        (1, 2) (2, 2) (3, 2)\n      \
    \  (1, 1) (2, 1) (3, 1)\n        '''\n    ''' 'Reduced by 1' GRID pattern: \n\
    \        (x: column, y: row)\n        (0, 2) (1, 2) (2, 2)\n        (0, 1) (1,\
    \ 1) (2, 1)\n        (0, 0) (1, 0) (2, 0)'''\n\ndef check_coordinates(string):\n\
    \    move = string.split()\n    # print(f'Initial \"move\": {move}')\n\n    #\
    \ Validate input\n    j = 0\n    for i in move:\n        if 1 < int(i) > 3:\n\
    \            return 'Coordinates should be from 1 to 3!'\n        if not i.isdigit():\n\
    \            return 'You should enter numbers!'\n\n        # Display is setup:\n\
    \        ''' Original matrix\n            (x: row, y: column)\n            (0,\
    \ 0) (0, 1) (0, 2)\n            (1, 0) (1, 1) (1, 2)\n            (2, 0) (2, 1)\
    \ (2, 2)\n            '''\n        # Invert cell Map to match this:\n        '''\
    \ Check based on GRID pattern: \n            (x: column, y: row)\n           \
    \ (1, 3) (2, 3) (3, 3)\n            (1, 2) (2, 2) (3, 2)\n            (1, 1) (2,\
    \ 1) (3, 1)\n            '''\n\n        # Setting values in list:\n        move[j]\
    \ = int(i)\n\n        j += 1\n\n    # List position = (x - 1) + (9 - (3 * y))\n\
    \    index = (move[0] - 1) + (9 - (3 * move[1]))\n    # print(f'Post loop\": {move}\
    \ type({type(move)}) index = {index}')\n\n    # Convert cartesian coordinates(x,\
    \ y) to multidimensional list coordinates(i, j)\n    # use this formula:\n   \
    \ # i = 3 - y\n    # j = x - 1\n    # Create a copy of the list\n    matrix_coords\
    \ = list()\n    for i in move:\n        matrix_coords.append(i)\n    # matrix_coords\
    \ = move\n    # print(f'Before: matrix_coords(i, j) ({matrix_coords}) cartesian_coords(x,\
    \ y) move({move})')\n    matrix_coords[0] = 3 - move[1]\n    matrix_coords[1]\
    \ = move[0] - 1\n    # print(f'matrix_coords(i, j) ({matrix_coords}) move = cartesian_coords(x,\
    \ y) ({move})')\n    # print(f'After: matrix_coords: {matrix_coords} = ({matrix_coords[0]},\
    \ {matrix_coords[1]}) index = {index}')\n    #\n    # print(f'Post conversion\
    \ \"move\": {move} move[0] = {move[0]} move[1] = {move[1]}')\n    # print(f'Convert\
    \ cartesian coordinates(x, y): {move} to multidimensional list coordinates(i,\
    \ j): {matrix_coords}')\n\n    global cells\n    if cells[matrix_coords[0]][matrix_coords[1]]\
    \ == 'X' or cells[matrix_coords[0]][matrix_coords[1]] == 'O':\n\n        return\
    \ 'This cell is occupied! Choose another one!'\n    else:\n        # print(f'Does\
    \ {cells[matrix_coords[0]][matrix_coords[1]]} = \"_\" or \" \"?')\n        if\
    \ cells[matrix_coords[0]][matrix_coords[1]] == '_' or cells[matrix_coords[0]][matrix_coords[1]]\
    \ == ' ':\n            cells[matrix_coords[0]][matrix_coords[1]] = 'X'\n     \
    \   #     print(f'Pop!')\n        # print(f'Poop!')\n        return 'break'\n\n\
    \ndef check_winner():\n    # Winning Scenarios\n    row0 = [cells[0][0], cells[0][1],\
    \ cells[0][2]]\n    row1 = [cells[1][0], cells[1][1], cells[1][2]]\n    row2 =\
    \ [cells[2][0], cells[2][1], cells[2][2]]\n\n    col0 = [cells[0][0], cells[1][0],\
    \ cells[2][0]]\n    col1 = [cells[0][1], cells[1][1], cells[2][1]]\n    col2 =\
    \ [cells[0][2], cells[1][2], cells[2][2]]\n\n    dia0 = [cells[0][0], cells[1][1],\
    \ cells[2][2]]\n    dia1 = [cells[2][0], cells[1][1], cells[0][2]]\n\n    combinations\
    \ = [row0, row1, row2, col0, col1, col2, dia0, dia1]\n\n    win_count_x = 0\n\
    \    win_count_o = 0\n    blanks_count = 0\n    x_count = 0\n    o_count = 0\n\
    \n    for combination in combinations:\n        for i in combination:\n      \
    \      if i == \"X\":\n                x_count += 1\n            elif i == \"\
    O\":\n                o_count += 1\n            elif i == \"_\":\n           \
    \     blanks_count += 1\n\n    # Loop to check for win counts\n    for combination\
    \ in combinations:\n        if combination[0] == combination[1] == combination[2]\
    \ == \"X\":\n            win_count_x += 1\n        elif combination[0] == combination[1]\
    \ == combination[2] == \"O\":\n            win_count_o += 1\n\n    if cells[0][0]\
    \ == 'X' and (win_count_x == 0 and win_count_o == 0) and (\n            blanks_count\
    \ > 1 and x_count > 3 and o_count > 3):\n        print('Game not finished')\n\
    \    elif cells[0][0] == 'X' and (win_count_x == win_count_o == blanks_count ==\
    \ 0):\n        print('Draw')\n    elif cells[0][0] == 'X' and (win_count_x ==\
    \ 1 and win_count_o == 0):\n        print('X wins')\n    elif cells[0][0] == 'X'\
    \ and (win_count_o == 1 and win_count_x == 0):\n        print('O wins')\n    elif\
    \ ((x_count - o_count) >= 2 or (o_count - x_count) >= 2) or (win_count_x == 1\
    \ and win_count_o == 1):\n        print('Impossible')\n\n\n# Intial player input\n\
    \nplayer_actions = input('Enter cells: ')\n# player_actions = 'XOXOXOXXO'\n# player_actions\
    \ = 'XXXOO__O_'\n# player_actions = '_X_O_____'\n# player_actions = '_XXOO_OX_'\n\
    '''\n---------\n|   X X |\n| O O   |\n| O X   |\n---------\n'''\n\n# print('String\
    \ Entered:', player_actions)\n\n# Populate cells with player moves\ncells = list()\n\
    cells = [[i for i in player_actions[x:x + 3]] for x in range(0, len(player_actions),\
    \ 3)]\n# print('Before loop:', [i for i in cells])\nprint_board()\n\n# Loop to\
    \ verify input\nwhile True:\n    player_move = input('Enter the coordinates: ')\n\
    \n    result = check_coordinates(player_move)\n    if result == 'break':\n   \
    \     # print('Success')\n        break\n    else:\n        print(f'{result}')\n\
    \nprint_board()\n\n# Output\n# print('After loop:', cells)\n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/73/stages/403/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/73/stages/403/implement">JetBrains
    Academy</a>
  time: Sun, 28 Jun 2020 21:50:11 UTC
record: -1
