type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    test1_input = '''remaining
    buy
    2
    buy
    2
    fill
    1000
    0
    0
    0
    buy
    2
    take
    remaining
    exit
    '''

    test2_input = '''remaining
    fill
    3000
    3000
    3000
    3000
    remaining
    exit
    '''

    test3_input = '''remaining
    buy
    1
    remaining
    exit
    '''

    test4_input = '''remaining
    buy
    2
    remaining
    exit
    '''

    test5_input = '''remaining
    buy
    3
    remaining
    exit
    '''

    test6_input = '''remaining
    take
    remaining
    exit
    '''

    test7_input = '''remaining
    buy
    back
    remaining
    exit
    '''


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            return TestCase.from_stepik(
                [
                    (
                        test1_input,
                        (
                            700 - 400,
                            390 - 540,
                            80 - 120,
                            7 - 9,
                            0 - 550,
                            "This test is exactly like in the example "
                            "- try to run it by yourself"
                        )
                    ),

                    (
                        test2_input,
                        (
                            3000,
                            3000,
                            3000,
                            3000,
                            0,
                            "This test checks \"fill\" action"
                        )
                    ),

                    (
                        test3_input,
                        (
                            -250,
                            0,
                            -16,
                            -1,
                            4,
                            "This test checks \"buy\" " +
                            "action with the first variant of coffee"
                        )
                    ),

                    (
                        test4_input,
                        (
                            -350,
                            -75,
                            -20,
                            -1,
                            7,
                            "This test checks \"buy\" " +
                            "action with the second variant of coffee"
                        )
                    ),

                    (
                        test5_input,
                        (
                            -200,
                            -100,
                            -12,
                            -1,
                            6,
                            "This test checks \"buy\" " +
                            "action with the third variant of coffee"
                        )
                    ),
                    (
                        test6_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            -550,
                            "This test checks \"take\" action"
                        )
                    ),

                    (
                        test7_input,
                        (
                            0,
                            0,
                            0,
                            0,
                            0,
                            "This test checks \"back\" " +
                            "action right after \"buy\" action"
                        )
                    ),
                ]
            )

        def check(self, reply: str, clue: Any) -> CheckResult:
            if len(reply.splitlines()) <= 1:
                return CheckResult.wrong('Too few lines in output')

            water_, milk_, beans_, cups_, money_, feedback = clue

            milk = []
            water = []
            beans = []
            cups = []
            money = []

            for line in reply.splitlines():
                line = line.replace('$', '').strip()
                if len(line.split()) == 0:
                    continue
                first_word = line.split()[0]
                if not first_word.isdigit():
                    continue
                amount = int(first_word)
                if 'milk' in line:
                    milk += amount,
                elif 'water' in line:
                    water += amount,
                elif 'beans' in line:
                    beans += amount,
                elif 'cups' in line:
                    cups += amount,
                elif 'money' in line or 'cash' in line:
                    money += amount,

            if len(milk) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"milk\", " +
                    f"found: {len(milk)}"
                )

            if len(water) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"water\", " +
                    f"found: {len(water)}"
                )

            if len(beans) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"beans\", " +
                    f"found: {len(beans)}"
                )

            if len(cups) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"cups\", " +
                    f"found: {len(cups)}"
                )

            if len(money) != 2:
                return CheckResult.wrong(
                    "There should be two lines with \"money\", " +
                    f"found: {len(money)}"
                )

            milk = milk[0], milk[-1]
            water = water[0], water[-1]
            beans = beans[0], beans[-1]
            cups = cups[0], cups[-1]
            money = money[0], money[-1]

            diff = lambda item: item[1] - item[0]

            is_correct = (
                diff(water) == water_ and
                diff(milk) == milk_ and
                diff(beans) == beans_ and
                diff(cups) == cups_ and
                diff(money) == money_
            )
            return CheckResult(is_correct, feedback)


    if __name__ == '__main__':
        CoffeeMachineTest('machine.coffee_machine').run_tests()
  learner_created: false
- name: machine/coffee_machine.py
  visible: true
  text: |
    def buy(drink_type):
        global water, milk, coffee_beans, cups, money

        if drink_type == 1:
            if water - 250 <= 0 or coffee_beans - 16 <= 0 or cups -1 <= 0:
                print('Sorry, not enough water!')
                return
        elif drink_type == 2:
            if water - 350 <= 0 or milk -75 <= 0 or coffee_beans - 20 <= 0 or cups - 1 <= 0:
                print('Sorry, not enough water!')
                return

        elif drink_type == 3:
            if water - 200 <= 0 or milk - 100 <= 0 or coffee_beans - 12 <= 0 or cups - 1 <= 0:
                print('Sorry, not enough water!\n')
                return
        else:
            pass

        if drink_type == 1:
            water -= 250
            coffee_beans -= 16
            cups -= 1
            money += 4
        elif drink_type == 2:
            water -= 350
            milk -= 75
            coffee_beans -= 20
            cups -= 1
            money += 7
        elif drink_type == 3:
            water -= 200
            milk -= 100
            coffee_beans -= 12
            cups -= 1
            money += 6

        print('I have enough resources, making you a coffee!\n')

    def fill():
        global water, milk, coffee_beans, cups, money
        print("Write how many ml of water the coffee machine has:")
        water += int(input())

        print("Write how many ml of milk the coffee machine has:")
        milk += int(input())

        print("Write how many grams of coffee beans the coffee machine has:")
        coffee_beans += int(input())

        print("Write how many cups of coffee you will need:")
        cups += int(input())

    def take():
        global money
        print(f'I gave you ${money}')
        money = 0

    def print_supplies(water, milk, coffee_beans, cups, money):
        print('The coffee machine has:')
        print(f'{water} of water')
        print(f'{milk} of milk')
        print(f'{coffee_beans} of coffee beans')
        print(f'{cups} of disposable cups')
        print(f'{money} of money')
        print()

    # Initial supplies
    water = 400
    milk = 540
    coffee_beans = 120
    cups = 9
    money = 550

    # print(print_supplies(water, milk, coffee_beans, cups, money))

    # Loop to service multiple requests
    while True:
        print('Write action (buy, fill, take, remaining or exit):')
        action = input().lower()

        if action == 'buy':
            print("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu: ")
            drink_type = input()
            if drink_type == 'back':
                continue
            else:
                buy(int(drink_type))
        elif action == 'fill':
            fill()
        elif action == 'take':
            take()
        elif action == 'remaining':
            print_supplies(water, milk, coffee_beans, cups, money)
        elif action == 'exit':
            break
  learner_created: true
- name: machine/coffee_machine_bkup.py
  visible: true
  text: |+
    # Write your code here
    print("Write how many ml of water the coffee machine has:")
    water = int(input())

    print("Write how many ml of milk the coffee machine has:")
    milk = int(input())

    print("Write how many grams of coffee beans the coffee machine has:")
    coffee_beans = int(input())

    print("Write how many cups of coffee you will need:")
    cups = int(input())

    w_cup = int(water / 200)
    m_cup = int(milk / 50)
    cb_cup = int(coffee_beans / 15)



    if w_cup > m_cup:
        total_cups = m_cup
    else:
        total_cups = w_cup

    if total_cups > cb_cup:
        total_cups = cb_cup

    if total_cups < 0:
        total_cups = 0

    if cups == total_cups:
        print("Yes, I can make that amount of coffee")
    elif cups < total_cups:
        print("Yes, I can make that amount of coffee (and even", total_cups - cups, "more than that)")
    elif cups > total_cups:
        print("No, I can make only", total_cups, "cups of coffee")

  learner_created: true
feedback_link: https://hyperskill.org/projects/68/stages/371/implement
status: Solved
record: 6
